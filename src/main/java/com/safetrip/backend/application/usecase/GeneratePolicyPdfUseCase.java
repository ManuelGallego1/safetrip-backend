package com.safetrip.backend.application.usecase;

import com.safetrip.backend.domain.model.*;
import com.safetrip.backend.domain.repository.*;
import com.safetrip.backend.domain.service.PdfGeneratorService;
import com.safetrip.backend.infrastructure.integration.pdf.dto.Template01ApData;
import com.safetrip.backend.infrastructure.integration.pdf.dto.Template02ApData;
import com.safetrip.backend.infrastructure.integration.pdf.mapper.Template01ApMapper;
import com.safetrip.backend.infrastructure.integration.pdf.mapper.Template02ApMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class GeneratePolicyPdfUseCase {

    private final PolicyRepository policyRepository;
    private final PolicyDetailRepository policyDetailRepository;
    private final PolicyPaymentRepository policyPaymentRepository;
    private final PolicyPersonRepository policyPersonRepository;
    private final PdfGeneratorService pdfGeneratorService;
    private final Template01ApMapper template01ApMapper;
    private final Template02ApMapper template02ApMapper;

    /**
     * Genera el PDF COMPLETO de una p√≥liza verificando permisos del usuario
     * (Template01 + Template02 con todos los asegurados)
     *
     * @param policyId ID de la p√≥liza
     * @return Bytes del PDF completo generado
     * @throws IllegalArgumentException si la p√≥liza no existe
     * @throws SecurityException        si el usuario no tiene permisos
     */
    @Transactional(readOnly = true)
    public byte[] execute(Long policyId) {
        log.info("üîç Iniciando generaci√≥n de PDF COMPLETO para p√≥liza: {}", policyId);

        // 1. Obtener usuario autenticado
        User currentUser = getAuthenticatedUser();
        log.debug("Usuario autenticado: {} (ID: {})",
                currentUser.getEmail(), currentUser.getUserId());

        // 2. Buscar la p√≥liza
        Policy policy = policyRepository.findById(policyId)
                .orElseThrow(() -> {
                    log.error("‚ùå P√≥liza no encontrada: {}", policyId);
                    return new IllegalArgumentException(
                            "P√≥liza no encontrada con ID: " + policyId
                    );
                });

        // 3. Verificar que el usuario sea el creador de la p√≥liza
        if (!policy.getCreatedByUser().getUserId().equals(currentUser.getUserId())) {
            log.error("‚ùå Usuario {} no autorizado para descargar p√≥liza {}",
                    currentUser.getUserId(), policyId);
            throw new SecurityException(
                    "No tiene permisos para descargar esta p√≥liza"
            );
        }

        log.debug("‚úÖ Usuario autorizado para acceder a la p√≥liza");

        // 4. Obtener el detalle de la p√≥liza
        PolicyDetail policyDetail = policyDetailRepository
                .findByPolicyId(policy)
                .orElseThrow(() -> {
                    log.error("‚ùå Detalle de p√≥liza no encontrado para p√≥liza: {}", policyId);
                    return new IllegalStateException(
                            "No se encontr√≥ el detalle de la p√≥liza"
                    );
                });

        // 5. Obtener el pago de la p√≥liza
        PolicyPayment policyPayment = policyPaymentRepository
                .findByPolicy(policy)
                .orElseThrow(() -> {
                    log.error("‚ùå Pago no encontrado para p√≥liza: {}", policyId);
                    return new IllegalStateException(
                            "No se encontr√≥ el pago de la p√≥liza"
                    );
                });

        // 6. Obtener las personas aseguradas
        List<PolicyPerson> policyPersons = policyPersonRepository.findByPolicyId(policyId);

        if (policyPersons.isEmpty()) {
            log.error("‚ùå No se encontraron personas aseguradas para p√≥liza: {}", policyId);
            throw new IllegalStateException(
                    "No se encontraron personas aseguradas en la p√≥liza"
            );
        }

        log.debug("‚úÖ Datos de p√≥liza obtenidos correctamente: {} personas aseguradas",
                policyPersons.size());

        // 7. Mapear a Template01ApData
        Template01ApData template01Data = template01ApMapper.toTemplate01ApData(
                policy,
                policyDetail,
                policyPayment,
                policyPersons,
                currentUser
        );

        log.debug("‚úÖ Datos mapeados a Template01ApData");

        // 8. Mapear a Template02ApData
        Template02ApData template02Data = template02ApMapper.toTemplate02ApData(
                policy,
                policyPayment,
                policyPersons
        );

        // 9. Generar PDF COMPLETO (Template01 + todas las p√°ginas de Template02)
        byte[] pdfBytes = pdfGeneratorService.generateCompletePolicyPdf(
                template01Data,
                template02Data
        );

        log.info("üéâ PDF COMPLETO generado exitosamente para p√≥liza {} - Tama√±o: {} bytes - {} asegurados",
                policyId, pdfBytes.length, policyPersons.size());

        return pdfBytes;
    }

    /**
     * Obtiene el usuario autenticado del contexto de seguridad
     */
    private User getAuthenticatedUser() {
        return (User) SecurityContextHolder.getContext()
                .getAuthentication()
                .getPrincipal();
    }
}